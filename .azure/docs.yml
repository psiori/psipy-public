parameters:
  branch: develop
  connection: psipyrg
  rg: psipy
  app: psipy
  path: docs/dist/output
  venv: ""

steps:
  # Build and publish documentation.
  - bash: |
      source $(venv)
      make -C docs init
      make -C docs apidoc
      make -C docs html
    displayName: Build sphinx documentation
    condition: |
      and(succeeded(),
          eq(variables['MATRIX_NAME'], 'ubuntu'),
          in(variables['Build.SourceBranchName'], '${{ parameters.branch }}'))
  - publish: ${{ parameters.path }}/objects.inv
    artifact: objects.inv
    displayName: Publish sphinx objects inventory.
    condition: |
      and(succeeded(),
          eq(variables['MATRIX_NAME'], 'ubuntu'),
          in(variables['Build.SourceBranchName'], '${{ parameters.branch }}'))
  # The following task relies on the azure pipeline Azure RM service
  # connection "ConnectedServiceName" being created first. Similarly, the
  # resource group "ResourceGroupName" and azure app service "WebAppName"
  # should be created manually through the azure portal. The free azure app
  # service tier should be fine for hosting docs. Additionally, setup the
  # app service to always use https and to use Azure AD authentication in
  # order to restrict access to members of the subscription. Finally, the app
  # service needs to be configured to serve static html content:
  # `python3 -m http.server $PORT --directory /home/site/wwwroot`
  - task: AzureRMWebAppDeployment@4
    displayName: Publish sphinx documentation
    inputs:
      ConnectedServiceName: ${{ parameters.connection }}
      DeployToSlotOrASEFlag: True
      appType: webAppLinux
      UseWebDeploy: True
      ResourceGroupName: ${{ parameters.rg }}
      WebAppName: ${{ parameters.app }}
      Package: ${{ parameters.path }}/
    # Only publish docs for specific branch.
    condition: |
      and(succeeded(),
          eq(variables['MATRIX_NAME'], 'ubuntu'),
          in(variables['Build.SourceBranchName'], '${{ parameters.branch }}'))
