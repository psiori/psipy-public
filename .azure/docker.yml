parameters:
  branch: develop
  acr: ""

jobs:
  - job: docker
    displayName: docker images
    variables:
      DOCKER_BUILDKIT: 1
      DOCKER_CLI_EXPERIMENTAL: enabled
      acr: ${{ parameters.acr }}
    # Only run docker build for branch `develop` and for tags.
    condition: |
      and(succeeded(),
          or(in(variables['Build.SourceBranchName'], '${{ parameters.branch }}'),
             startsWith(variables['Build.SourceBranch'], 'refs/tags/')))

    strategy:
      matrix:
        cpu:
          image.suffix: ""
          image.base: "ubuntu:18.04"
        gpu:
          image.suffix: "-gpu"
          image.base: "nvidia/cuda:10.1-cudnn7-devel-ubuntu18.04"

    pool:
      vmImage: "ubuntu-18.04"

    steps:
      - checkout: self
        submodules: recursive
        lfs: false

      - bash: |
          tag=$(git describe --exact-match --tags $(git log -n1 --pretty='%h'))
          return=$?
          echo "Extract git tag return code: $return"
          if [ $return -ne 0 ]; then
            tag=latest$(image.suffix)
          else
            echo "Full git tag: $tag"
            if [[ "v0.1.0" =~ v[0-9]+\.[0-9]+\.[0-9]+ ]]; then
              echo "Git tag with leading v: $tag"
              tag=${tag:1}  # strip leading `v`
            fi
            tag=$tag$(image.suffix)
          fi
          echo "Set docker image tag variable: $tag"
          echo "##vso[task.setvariable variable=tag]$tag"
        displayName: Set tag name

      - task: Docker@2
        displayName: Login to psipy ACR
        inputs:
          command: login
          containerRegistry: psipy-acr

      - bash: |
          docker pull $(acr):latest$(image.suffix)-base || true
          docker pull $(acr):latest$(image.suffix) || true
        displayName: Pull previous latest image

      - bash: |
          set -ex
          echo "Building $(tag)-base"
          docker build . \
            --tag $(acr):$(tag)-base \
            --file tools/docker/Dockerfile.base \
            --build-arg BUILDKIT_INLINE_CACHE=1 \
            --build-arg BASE_IMAGE=$(image.base) \
            --cache-from $(acr):$(tag)-base
          docker push $(acr):$(tag)-base

          echo "Building $(tag)"
          docker build . \
            --tag $(acr):$(tag) \
            --file tools/docker/Dockerfile \
            --build-arg BUILDKIT_INLINE_CACHE=1 \
            --build-arg BASE_IMAGE=$(acr):$(tag)-base \
            --cache-from $(acr):$(tag)
          docker push $(acr):$(tag)
        displayName: Build and publish psipy images
