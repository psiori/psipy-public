parameters:
  branch: develop
  # CCACHE_DIR: $(Pipeline.Workspace)/ccache
  # CLCACHE_DIR: $(Pipeline.Workspace)/ccache

jobs:
  - job: distributable
    displayName: distributable
    condition: |
      and(succeeded(),
          or(in(variables['Build.SourceBranchName'], '${{ parameters.branch }}'),
             startsWith(variables['Build.SourceBranch'], 'refs/tags/'))
      )

    strategy:
      matrix:
        windows:
          MATRIX_NAME: windows
          imageName: "vs2017-win2016"
          python.version: "3.6"
          python.architecture: "x64"
        ubuntu:
          MATRIX_NAME: ubuntu
          imageName: "ubuntu-18.04"
          python.version: "3.6"
          python.architecture: "x64"
        macos:
          MATRIX_NAME: macos
          imageName: "macos-10.14"
          python.version: "3.6"
          python.architecture: "x64"

    pool:
      vmImage: $(imageName)

    steps:
      - checkout: self
        submodules: recursive
        lfs: false

      # Caching currently does not work on windows, therefore disable it for all
      # environments for now.
      # - task: Cache@2
      #   inputs:
      #     key: ccache | $(Agent.OS) | $(Agent.OSArchitecture) | "$(python.version)" | $(python.architecture)| $(Date:yyyyMM)
      #     path: $(CCACHE_DIR)
      #   displayName: ccache

      - task: UsePythonVersion@0
        displayName: Use Python $(python.version)
        inputs:
          versionSpec: $(python.version)
          architecture: $(python.architecture)

      - bash: |
          git clone --single-branch -b develop https://github.com/Nuitka/Nuitka.git ./nuitka
          pip install -U ./nuitka
          rm -rf ./nuitka
        displayName: Install Nuitka From Git

      - script: |
          # set NUITKA_CLCACHE_BINARY="C:\hostedtoolcache\windows\Python\3.6.8\x64\Scripts\clcache.exe"
          # set CC="clcache"
          # set CXX="clcache"
          # pip install clcache

          call "C:\Program Files (x86)\Microsoft Visual Studio\2017\Enterprise\VC\Auxiliary\Build\vcvarsall.bat" $(python.architecture)
          set MSSdk=1
          set DISTUTILS_USE_SDK=1
          make dist/psipy.pyd
        condition: and(succeeded(), eq( variables['Agent.OS'], 'Windows_NT' ))
        displayName: Build distributable (windows)

      - bash: |
          sudo apt-get install -y ccache || brew install ccache
          export PATH=/usr/lib/ccache:$PATH
          make dist/psipy.so
          # CXXFLAGS="-Wno-error=unused-variable -Wno-error=unused-function"
        displayName: Build distributable (*nix)
        condition: and(succeeded(), ne( variables['Agent.OS'], 'Windows_NT' ))

      - bash: |
          echo "$(Agent.OS) $(Agent.OSArchitecture)" >> dist/meta.txt
          python --version >> dist/meta.txt
          echo "Python architecture $(python.architecture)" >> dist/meta.txt
          echo "git commit $(Build.SourceVersion)" >> dist/meta.txt
          cp requirements* dist/
        displayName: Create metadata file

      - bash: |
          cd dist
          python -c "import psipy; print(psipy.__version__)" || exit 1
          cd -
        displayName: Test importing distributable

      - task: PublishPipelineArtifact@1
        inputs:
          path: dist
          artifactName: psipy-$(MATRIX_NAME)-$(Agent.OSArchitecture)
        displayName: Publish distributable artifact
